AWSTemplateFormatVersion: "2010-09-09"
Description: VPC template
Parameters:
  VpcCidr:
    Type: String
    Description: VPC CIDR
    Default: 10.0.0.0/16
  Az1:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: 1st AZ name
  Az2:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: 2nd AZ name
Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        -
          Key: Name
          Value: !Sub "${AWS::StackName}-Vpc"
        -
          Key: CostTag
          Value: !Ref AWS::StackName
  IpV6Block:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
      VpcId: !Ref Vpc
      AmazonProvidedIpv6CidrBlock: true
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        -
          Key: Name
          Value: !Sub "${AWS::StackName}-InternetGateway"
        -
          Key: CostTag
          Value: !Ref AWS::StackName
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway
  EgressOnlyGateway:
    Type: AWS::EC2::EgressOnlyInternetGateway
    DependsOn: IpV6Block
    Properties:
      VpcId: !Ref Vpc
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: IpV6Block
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Ref Az1
      MapPublicIpOnLaunch: true
      CidrBlock: !Select
        - 0
        -
          Fn::Cidr:
            - !GetAtt Vpc.CidrBlock
            - 4
            - 14
      Ipv6CidrBlock: !Select
        - 0
        -
          Fn::Cidr:
            - !Select
              - 0
              - !GetAtt Vpc.Ipv6CidrBlocks
            - 4
            - 64
      Tags:
        -
          Key: Name
          Value: !Sub "${AWS::StackName}-PublicSubnet1"
        -
          Key: CostTag
          Value: !Ref AWS::StackName
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: IpV6Block
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Ref Az1
      AssignIpv6AddressOnCreation: true
      CidrBlock: !Select
        - 1
        -
          Fn::Cidr:
            - !GetAtt Vpc.CidrBlock
            - 4
            - 14
      Ipv6CidrBlock: !Select
        - 1
        -
          Fn::Cidr:
            - !Select
              - 0
              - !GetAtt Vpc.Ipv6CidrBlocks
            - 4
            - 64
      Tags:
        -
          Key: Name
          Value: !Sub "${AWS::StackName}-PrivateSubnet1"
        -
          Key: CostTag
          Value: !Ref AWS::StackName
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: IpV6Block
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Ref Az2
      MapPublicIpOnLaunch: true
      CidrBlock: !Select
        - 2
        -
          Fn::Cidr:
            - !GetAtt Vpc.CidrBlock
            - 4
            - 14
      Ipv6CidrBlock: !Select
        - 2
        -
          Fn::Cidr:
            - !Select
              - 0
              - !GetAtt Vpc.Ipv6CidrBlocks
            - 4
            - 64
      Tags:
        -
          Key: Name
          Value: !Sub "${AWS::StackName}-PublicSubnet2"
        -
          Key: CostTag
          Value: !Ref AWS::StackName
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: IpV6Block
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Ref Az2
      AssignIpv6AddressOnCreation: true
      CidrBlock: !Select
        - 3
        -
          Fn::Cidr:
            - !GetAtt Vpc.CidrBlock
            - 4
            - 14
      Ipv6CidrBlock: !Select
        - 3
        -
          Fn::Cidr:
            - !Select
              - 0
              - !GetAtt Vpc.Ipv6CidrBlocks
            - 4
            - 64
      Tags:
        -
          Key: Name
          Value: !Sub "${AWS::StackName}-PrivateSubnet2"
        -
          Key: CostTag
          Value: !Ref AWS::StackName
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        -
          Key: Name
          Value: !Sub "${AWS::StackName}-PublicRouteTable"
        -
          Key: CostTag
          Value: !Ref AWS::StackName
  PublicRouteIPv4:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicRouteIPv6:
    Type: AWS::EC2::Route
    DependsOn:
      - IpV6Block
      - InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationIpv6CidrBlock: '::/0'
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  PublicSubnet2RouteAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        -
          Key: Name
          Value: !Sub "${AWS::StackName}-PrivateRouteTable1"
        -
          Key: CostTag
          Value: !Ref AWS::StackName
  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationIpv6CidrBlock: '::/0'
      EgressOnlyInternetGatewayId: !Ref EgressOnlyGateway
  PrivateSubnet1RouteAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        -
          Key: Name
          Value: !Sub "${AWS::StackName}-PrivateRouteTable2"
        -
          Key: CostTag
          Value: !Ref AWS::StackName
  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationIpv6CidrBlock: '::/0'
      EgressOnlyInternetGatewayId: !Ref EgressOnlyGateway
  PrivateSubnet2RouteAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2
  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      VpcId: !Ref Vpc
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref PrivateRouteTable1
        - !Ref PrivateRouteTable2
  DynamoDBEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.dynamodb"
      VpcId: !Ref Vpc
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref PrivateRouteTable1
        - !Ref PrivateRouteTable2
